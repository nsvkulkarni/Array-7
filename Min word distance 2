//TC:-O(n)
//SC:- O(n)

class WordDistance {
    
      HashMap <String, List<Integer>> map = new HashMap<>();

    public WordDistance(String[] wordsDict) {
        
        for(int i= 0; i < wordsDict.length; i++)
        {
            if(!map.containsKey(wordsDict[i]))
            {
                map.put(wordsDict[i], new ArrayList<>());
            }
            
            map.get(wordsDict[i]).add(i);
        }
        
    }
    
    public int shortest(String word1, String word2) {
        
        List<Integer> w1List = map.get(word1);
        List<Integer> w2List = map.get(word2);
        
        int w1 = 0;
        int w2 = 0;
        int min = Integer.MAX_VALUE;
        
        while(w1 < w1List.size() && w2 < w2List.size())
        {
            min = Math.min(min, Math.abs(w1List.get(w1)-w2List.get(w2)));
                           
            if(w1List.get(w1) > w2List.get(w2))
             {
                     w2++;          
             }
            else
                    w1++;
                           
        } 
                           return min;
        
    }
}

/**
 * Your WordDistance object will be instantiated and called as such:
 * WordDistance obj = new WordDistance(wordsDict);
 * int param_1 = obj.shortest(word1,word2);
 */
